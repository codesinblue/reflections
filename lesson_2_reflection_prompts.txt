What happens when you initialize a repository? Why do you need to do it?

Initializes the directory as a git repository.  Sets up the .git file for git to use.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

It offers the chance to change your mind before commiting all of the staged files.  Changes can be made & files can be added to staging area prior to finalizing the commit.

How can you use the staging area to make sure you have one commit per logical
change?

You can add all of the files you believe are a part of that one logical change, then review them to ensure you are only commiting files that pertain to that change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When you want to try out various changes or options in the code; when multiple people may be working in the same code at the same time.  This prevents overwriting someone else's changes.

How do the diagrams help you visualize the branch structure?

They make it easier to see at which point in the master each branch was created and whether any commits may be unreachable.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The result of merging two branches is adding together all of the changes in the two branches.  Diagramming it as we do allows us to see what commits/changes were made in each commit of each branch, then shows those two branches merging into a new master branch

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
Pros: Git prevents itself from changing anything when it detects conflicting changes.  This prevents one set of code from possibly wiping out intended changes from another set of code.
      
Cons: You have figure out how to resolve conflicts
